#!/bin/sh
#
# /etc/init.d/eccles -- startup script for the ACLS proxy service
#
# (Turnkey Linux flavor)
#
### BEGIN INIT INFO
# Provides:		eccles
# Required-Start:    $local_fs $remote_fs $network
# Required-Stop:     $local_fs $remote_fs $network
# Should-Start:      $named
# Should-Stop:       $named
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Start Eccles.
# Description:       Start the ACLS proxy service.
### END INIT INFO

set -e

PATH=/bin:/usr/bin:/sbin:/usr/sbin
NAME=eccles
DESC="ACLS proxy service"
DEFAULT=/etc/default/$NAME

if [ `id -u` -ne 0 ]; then
        echo "Root privilege is required to run this script"
        exit 1
fi
 
if [ -r /etc/default/locale ]; then
        . /etc/default/locale
        export LANG
fi

. /lib/lsb/init-functions

if [ -r /etc/default/rcS ]; then
        . /etc/default/rcS
fi


### Start of configurable properties; see $DEFAULT

# Run Eccles as this user ID and group ID
ECCLES_USER=eccles
ECCLES_GROUP=eccles
LOG_DIR=/var/log/$NAME

JAVA=/usr/bin/java

# Installation directory
ECCLES_HOME=/usr/share/$NAME

### End of configurable properties;

if [ -f "$DEFAULT" ]; then
        . "$DEFAULT"
fi

if [ -z "$JAVA_HOME" ] ; then 
	JAVA_HOME=$(readlink -f /usr/bin/java | sed "s:bin/java::") 
fi
export JAVA_HOME

PID_FILE=/var/run/$NAME.pid

case "$1" in
  start)
    if [ -z "$JAVA_HOME" ]; then
        log_failure_msg "no JRE found - please set JAVA or JAVA_HOME"
        exit 1
    fi
    log_daemon_msg "Starting $DESC" "$NAME"
    if start-stop-daemon --test --start --pidfile "$PID_FILE" \
           --user $ECCLES_USER --exec "$JAVA_HOME/bin/java" > /dev/null; then
        set +e
        start-stop-daemon --start -b -m -u "$ECCLES_USER" -g "$ECCLES_GROUP" \
                -c "$ECCLES_USER" -d "$LOG_DIR" -p "$PID_FILE" \
                --exec $JAVA_HOME/bin/java -- -jar $ECCLES_HOME/eccles.jar \
                                 $ECCLES_HOME/eccles.properties \
                                 > /var/log/$NAME/${NAME}.out 2>&1
        set -e
        sleep 5
        if start-stop-daemon --test --start --pidfile "$PID_FILE" \
                --user $ECCLES_USER --exec "$JAVA_HOME/bin/java" > /dev/null; then
            if [ -f "$PID_FILE" ]; then
                rm -f "$PID_FILE"
            fi
            log_end_msg 1
        else
            log_end_msg 0
        fi
    else
        log_progress_msg "(already running)"
        log_end_msg 0
    fi
    ;;
  stop)
    log_daemon_msg "Stopping $DESC" "$NAME"
    set +e
    if [ -f "$PID_FILE" ]; then 
        start-stop-daemon --stop --signal INT --pidfile "$PID_FILE" \
              --user "$ECCLES_USER" --retry=TERM/20/KILL/5 > /dev/null
        if [ $? -eq 1 ]; then
            log_progress_msg "$DESC is not running but pid file exists, cleaning up"
        elif [ $? -eq 3 ]; then
            PID="`cat $PID_FILE`"
            log_failure_msg "Failed to stop $NAME (pid $PID)"
            exit 1
        fi
        rm -f "$PID_FILE"
    else
        log_progress_msg "(not running)"
    fi
    log_end_msg 0
    set -e
    ;;
  status)
    set +e
    start-stop-daemon --test --start --pidfile "$PID_FILE" \
           --user $ECCLES_USER --exec "$JAVA_HOME/bin/java" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
        if [ -f "$PID_FILE" ]; then
            log_success_msg "$DESC is not running, but pid file exists."
            exit 1
        else
            log_success_msg "$DESC is not running."
            exit 3
        fi
    else
        log_success_msg "$DESC is running with pid `cat $PID_FILE`"
    fi
    set -e
    ;;
  restart|force-reload)
    if [ -f "$PID_FILE" ]; then
        $0 stop
        sleep 1
    fi
    $0 start
    ;;

  *)
    log_success_msg "Usage: $0 {start|stop|restart|force-reload|status}"
    exit 1
    ;;
esac

exit 0
  